
classdef ThrusterConversionFcn < ros.Message
    %ThrusterConversionFcn MATLAB implementation of uuv_gazebo_ros_plugins_msgs/ThrusterConversionFcn
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'uuv_gazebo_ros_plugins_msgs/ThrusterConversionFcn' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5cc7c4f30276fbc995f2325f64846776' % The MD5 Checksum of the message definition
        PropertyList = { 'FunctionName' 'Tags' 'Data' 'LookupTableInput' 'LookupTableOutput' } % List of non-constant message properties
        ROSPropertyList = { 'function_name' 'tags' 'data' 'lookup_table_input' 'lookup_table_output' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        FunctionName
        Tags
        Data
        LookupTableInput
        LookupTableOutput
    end
    methods
        function set.FunctionName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ThrusterConversionFcn', 'FunctionName');
            obj.FunctionName = char(val);
        end
        function set.Tags(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ThrusterConversionFcn', 'Tags');
            obj.Tags = cell(val);
        end
        function set.Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ThrusterConversionFcn', 'Data');
            obj.Data = double(val);
        end
        function set.LookupTableInput(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ThrusterConversionFcn', 'LookupTableInput');
            obj.LookupTableInput = double(val);
        end
        function set.LookupTableOutput(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ThrusterConversionFcn', 'LookupTableOutput');
            obj.LookupTableOutput = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.uuv_gazebo_ros_plugins_msgs.ThrusterConversionFcn.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.uuv_gazebo_ros_plugins_msgs.ThrusterConversionFcn(strObj);
        end
    end
end
