
classdef UnderwaterObjectModel < ros.Message
    %UnderwaterObjectModel MATLAB implementation of uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '35ada57addb7202af96020ea2ddc109c' % The MD5 Checksum of the message definition
        PropertyList = { 'Cob' 'Inertia' 'AddedMass' 'LinearDamping' 'LinearDampingForwardSpeed' 'QuadraticDamping' 'Volume' 'BboxHeight' 'BboxLength' 'BboxWidth' 'FluidDensity' 'NeutrallyBuoyant' } % List of non-constant message properties
        ROSPropertyList = { 'cob' 'inertia' 'added_mass' 'linear_damping' 'linear_damping_forward_speed' 'quadratic_damping' 'volume' 'bbox_height' 'bbox_length' 'bbox_width' 'fluid_density' 'neutrally_buoyant' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Vector3' ...
            'ros.msggen.geometry_msgs.Inertia' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Cob
        Inertia
        AddedMass
        LinearDamping
        LinearDampingForwardSpeed
        QuadraticDamping
        Volume
        BboxHeight
        BboxLength
        BboxWidth
        FluidDensity
        NeutrallyBuoyant
    end
    methods
        function set.Cob(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'Cob')
            obj.Cob = val;
        end
        function set.Inertia(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Inertia'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'Inertia')
            obj.Inertia = val;
        end
        function set.AddedMass(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'AddedMass');
            obj.AddedMass = double(val);
        end
        function set.LinearDamping(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'LinearDamping');
            obj.LinearDamping = double(val);
        end
        function set.LinearDampingForwardSpeed(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'LinearDampingForwardSpeed');
            obj.LinearDampingForwardSpeed = double(val);
        end
        function set.QuadraticDamping(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'QuadraticDamping');
            obj.QuadraticDamping = double(val);
        end
        function set.Volume(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'Volume');
            obj.Volume = double(val);
        end
        function set.BboxHeight(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'BboxHeight');
            obj.BboxHeight = double(val);
        end
        function set.BboxLength(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'BboxLength');
            obj.BboxLength = double(val);
        end
        function set.BboxWidth(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'BboxWidth');
            obj.BboxWidth = double(val);
        end
        function set.FluidDensity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'FluidDensity');
            obj.FluidDensity = double(val);
        end
        function set.NeutrallyBuoyant(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'UnderwaterObjectModel', 'NeutrallyBuoyant');
            obj.NeutrallyBuoyant = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.uuv_gazebo_ros_plugins_msgs.UnderwaterObjectModel.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.uuv_gazebo_ros_plugins_msgs.UnderwaterObjectModel(strObj);
        end
    end
end
